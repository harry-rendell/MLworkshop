import matplotlib.pyplot as plt
import numpy as np

def plot_classifications(x_test, y_test, predicted):
    """
    Plot a random set of test data with predicted and true labels on an 8x8 grid

    Parameters
    ----------
    x_train : training images
    y_train : true labels
    predicted : model predictions of x_train

    """
    nrows = 8
    ncols = 8
    shuffled_idxs = np.random.randint(0, len(x_test), nrows*ncols)
    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(16, 16))
    for i, ax in enumerate(axes.ravel()):
        idx = shuffled_idxs[i]
        image = x_test[idx]
        label_true = y_test[idx]
        label_predicted = predicted[idx]
        if label_true != label_predicted:
            # If the true label is different from the prediction of the neural network, plot in red
            ax.imshow(image, cmap=plt.cm.Reds_r, interpolation="nearest")
        else:
            # Otherwise, plot in grayscale
            ax.imshow(image, cmap=plt.cm.Greys_r, interpolation="nearest")
        ax.set_axis_off()
        ax.set_title('predicted: {}\ntrue: {}'.format(label_predicted, label_true))

    plt.subplots_adjust(wspace=1, hspace=1)


def plot_training(history):
    """
    Plot a random set of test data with predicted and true labels on an 8x8 grid

    Parameters
    ----------
    x_train : training images
    y_train : true labels
    predicted : model predictions of x_train

    """
    fig, axes = plt.subplots(1,2, figsize = (16,5))
    for ax, name in zip(axes, ['loss','accuracy']):
        ax.plot(history.history[name])
        ax.plot(history.history['val_'+name])
        ax.set(title='model '+name, xlabel='epoch', ylabel=name)
    axes[0].legend(['train', 'test'])
    axes[1].legend(['train', 'test'])

def plot_data(x, y)
    """
    Plot a random set of test data with predicted and true labels on an 8x8 grid

    Parameters
    ----------
    x_train : training images
    y_train : true labels
    predicted : model predictions of x_train

    """
    fig, axes = plt.subplots(nrows=6, ncols=6, figsize=(10, 10))
    for ax, image, label in zip(axes.ravel(), x, y):
        ax.set_axis_off()
        ax.imshow(image, cmap=plt.cm.gray, interpolation="nearest")
        ax.set_title("Label: %i" % label)

    plt.subplots_adjust(wspace=0.5, hspace=0.5)